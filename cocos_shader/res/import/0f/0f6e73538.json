[
  {
    "__type__": "cc.Material",
    "_name": "loading-style-1",
    "_effectAsset": {
      "__uuid__": "aaO3Kc+xZCk4eJi3824Bfx"
    },
    "_techniqueData": {
      "0": {
        "defines": {
          "USE_TEXTURE": true,
          "USE_LOADING_STYLE": true,
          "USE_ANTI_ALIAS": true
        },
        "props": {
          "u_arc_color": {
            "__type__": "cc.Color",
            "r": 255,
            "g": 255,
            "b": 255
          }
        }
      }
    }
  },
  {
    "__type__": "cc.EffectAsset",
    "_name": "loading-style-1",
    "techniques": [
      {
        "passes": [
          {
            "blendState": {
              "targets": [
                {
                  "blend": true
                }
              ]
            },
            "rasterizerState": {
              "cullMode": 0
            },
            "properties": {
              "texture": {
                "value": "white",
                "type": 29
              },
              "u_arc_color": {
                "value": [
                  1,
                  1,
                  1,
                  1
                ],
                "editor": {
                  "type": "color",
                  "tooltip": "圆弧线颜色"
                },
                "type": 16
              },
              "u_arc_radius": {
                "value": [
                  0.3
                ],
                "editor": {
                  "tooltip": "圆弧半径"
                },
                "type": 13
              },
              "u_arc_line_width": {
                "value": [
                  0.1
                ],
                "editor": {
                  "tooltip": "圆弧线宽"
                },
                "type": 13
              },
              "u_ball_color": {
                "value": [
                  1,
                  1,
                  0,
                  1
                ],
                "editor": {
                  "type": "color",
                  "tooltip": "小球颜色"
                },
                "type": 16
              },
              "u_ball_angle": {
                "value": [
                  30
                ],
                "editor": {
                  "tooltip": "小球所在角度"
                },
                "type": 13
              },
              "u_ball_angle_range": {
                "value": [
                  30
                ],
                "editor": {
                  "tooltip": "小球所在角度的夹角范围"
                },
                "type": 13
              },
              "u_ball_radius": {
                "value": [
                  0.05
                ],
                "editor": {
                  "tooltip": "小球半径"
                },
                "type": 13
              }
            },
            "program": "loading-style-1|vs|fs"
          }
        ]
      }
    ],
    "shaders": [
      {
        "hash": 1408540380,
        "glsl3": {
          "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
          "frag": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n#if USE_ANTI_ALIAS\n#endif\n#if USE_LOADING_STYLE\nuniform style{\n  vec4 u_arc_color;\n  vec4 u_ball_color;\n  float u_arc_line_width;\n  float u_arc_radius;\n  float u_ball_angle;\n  float u_ball_angle_range;\n  float u_ball_radius;\n};\nvec2 getUv0Shadow() {\n  vec2 uv0 = v_uv0 - vec2(0.5, 0.5);\n  float rotation_angle = u_ball_angle + cc_time.x * 200.0;\n  float rotation_radians = radians(rotation_angle);\n  vec2 uv0_after_rotation = vec2(\n    uv0.x * cos(rotation_radians) - uv0.y * sin(rotation_radians),\n    uv0.x * sin(rotation_radians) + uv0.y * cos(rotation_radians)\n  );\n  return uv0_after_rotation;\n}\nvec4 getArcColor() {\n  vec2 uv0 = getUv0Shadow();\n  float len = length(uv0);\n  float min_radius = u_arc_radius - u_arc_line_width * 0.5;\n  float max_radius = u_arc_radius + u_arc_line_width * 0.5;\n  if (len >= min_radius && len <= max_radius) {\n    float radian = acos(uv0.x / len);\n    float radian_range = radians(u_ball_angle_range * 0.5);\n    if (radian >= radian_range) {\n      float alpha = 1.0;\n      #if USE_ANTI_ALIAS\n        alpha = smoothstep(0.0, 0.05, 1.0 - abs(len - u_arc_radius) / (u_arc_line_width * 0.5));\n      #endif\n      return u_arc_color * alpha;\n    }\n  }\n  return vec4(0.0, 0.0, 0.0, 0.0);\n}\nvec4 getBallColor() {\n  vec2 uv0 = getUv0Shadow();\n  vec2 ball_center_point = vec2(u_arc_radius, 0);\n  float ball_radius = u_ball_radius + u_ball_radius * 0.3 * cos(radians(cc_time.x * 200.0));\n  float dis = distance(uv0, ball_center_point);\n  if (dis <= ball_radius) {\n    float alpha = 1.0;\n    #if USE_ANTI_ALIAS\n      alpha = smoothstep(0.0, 0.01, ball_radius - dis);\n    #endif\n    return u_ball_color * alpha;\n  } else{\n    return vec4(0.0, 0.0, 0.0, 0.0);\n  }\n}\n#endif\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  gl_FragColor = o;\n  #if USE_LOADING_STYLE\n    vec4 arc_color = getArcColor();\n    vec4 ball_color = getBallColor();\n    gl_FragColor = ball_color * ball_color.a + arc_color;\n  #endif\n}"
        },
        "glsl1": {
          "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
          "frag": "\nprecision highp float;\nuniform vec4 cc_time;\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n#if USE_ANTI_ALIAS\n#endif\n#if USE_LOADING_STYLE\nuniform vec4 u_arc_color;\nuniform vec4 u_ball_color;\nuniform float u_arc_line_width;\nuniform float u_arc_radius;\nuniform float u_ball_angle;\nuniform float u_ball_angle_range;\nuniform float u_ball_radius;\nvec2 getUv0Shadow() {\n  vec2 uv0 = v_uv0 - vec2(0.5, 0.5);\n  float rotation_angle = u_ball_angle + cc_time.x * 200.0;\n  float rotation_radians = radians(rotation_angle);\n  vec2 uv0_after_rotation = vec2(\n    uv0.x * cos(rotation_radians) - uv0.y * sin(rotation_radians),\n    uv0.x * sin(rotation_radians) + uv0.y * cos(rotation_radians)\n  );\n  return uv0_after_rotation;\n}\nvec4 getArcColor() {\n  vec2 uv0 = getUv0Shadow();\n  float len = length(uv0);\n  float min_radius = u_arc_radius - u_arc_line_width * 0.5;\n  float max_radius = u_arc_radius + u_arc_line_width * 0.5;\n  if (len >= min_radius && len <= max_radius) {\n    float radian = acos(uv0.x / len);\n    float radian_range = radians(u_ball_angle_range * 0.5);\n    if (radian >= radian_range) {\n      float alpha = 1.0;\n      #if USE_ANTI_ALIAS\n        alpha = smoothstep(0.0, 0.05, 1.0 - abs(len - u_arc_radius) / (u_arc_line_width * 0.5));\n      #endif\n      return u_arc_color * alpha;\n    }\n  }\n  return vec4(0.0, 0.0, 0.0, 0.0);\n}\nvec4 getBallColor() {\n  vec2 uv0 = getUv0Shadow();\n  vec2 ball_center_point = vec2(u_arc_radius, 0);\n  float ball_radius = u_ball_radius + u_ball_radius * 0.3 * cos(radians(cc_time.x * 200.0));\n  float dis = distance(uv0, ball_center_point);\n  if (dis <= ball_radius) {\n    float alpha = 1.0;\n    #if USE_ANTI_ALIAS\n      alpha = smoothstep(0.0, 0.01, ball_radius - dis);\n    #endif\n    return u_ball_color * alpha;\n  } else{\n    return vec4(0.0, 0.0, 0.0, 0.0);\n  }\n}\n#endif\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  gl_FragColor = o;\n  #if USE_LOADING_STYLE\n    vec4 arc_color = getArcColor();\n    vec4 ball_color = getBallColor();\n    gl_FragColor = ball_color * ball_color.a + arc_color;\n  #endif\n}"
        },
        "builtins": {
          "globals": {
            "blocks": [
              {
                "name": "CCGlobal",
                "defines": []
              }
            ],
            "samplers": []
          },
          "locals": {
            "blocks": [
              {
                "name": "CCLocal",
                "defines": []
              }
            ],
            "samplers": []
          }
        },
        "defines": [
          {
            "name": "USE_TEXTURE",
            "type": "boolean",
            "defines": []
          },
          {
            "name": "CC_USE_MODEL",
            "type": "boolean",
            "defines": []
          },
          {
            "name": "USE_ANTI_ALIAS",
            "type": "boolean",
            "defines": []
          },
          {
            "name": "USE_LOADING_STYLE",
            "type": "boolean",
            "defines": []
          }
        ],
        "blocks": [
          {
            "name": "style",
            "members": [
              {
                "name": "u_arc_color",
                "type": 16,
                "count": 1
              },
              {
                "name": "u_ball_color",
                "type": 16,
                "count": 1
              },
              {
                "name": "u_arc_line_width",
                "type": 13,
                "count": 1
              },
              {
                "name": "u_arc_radius",
                "type": 13,
                "count": 1
              },
              {
                "name": "u_ball_angle",
                "type": 13,
                "count": 1
              },
              {
                "name": "u_ball_angle_range",
                "type": 13,
                "count": 1
              },
              {
                "name": "u_ball_radius",
                "type": 13,
                "count": 1
              }
            ],
            "defines": [
              "USE_LOADING_STYLE"
            ],
            "binding": 0
          }
        ],
        "samplers": [
          {
            "name": "texture",
            "type": 29,
            "count": 1,
            "defines": [
              "USE_TEXTURE"
            ],
            "binding": 30
          }
        ],
        "record": null,
        "name": "loading-style-1|vs|fs"
      }
    ]
  }
]